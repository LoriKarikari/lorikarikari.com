---
import { CollectionEntry, getCollection } from "astro:content";
import Posts from "@layouts/posts.astro";
import PostDetails from "@layouts/post-details.astro";
import getSortedPosts from "@utils/getSortedPosts";
import getPageNumbers from "@utils/getPageNumbers";
import getPostsInSeries from "@utils/getPostsInSeries";
import slugify from "@utils/slugify";
import { SITE } from "@config";

export interface Props {
  post: CollectionEntry<"blog">;
  postsInSeries: CollectionEntry<"blog">[];
}

export async function getStaticPaths() {
  const posts = await getCollection("blog", ({ data }) => !data.draft);

  const postResult = posts.map(post => {
    const postsInSeries =
      post.data.series && getPostsInSeries(posts, post.data.series);
    return {
      params: { slug: slugify(post.data) },
      props: { post, postsInSeries },
    };
  });

  const pagePaths = getPageNumbers(posts.length).map(pageNum => ({
    params: { slug: String(pageNum) },
  }));

  return [...postResult, ...pagePaths];
}

const { slug } = Astro.params;
const { post, postsInSeries } = Astro.props;

const posts = await getCollection("blog");

const sortedPosts = getSortedPosts(posts);

const totalPages = getPageNumbers(sortedPosts.length);

const currentPage =
  slug && !isNaN(Number(slug)) && totalPages.includes(Number(slug))
    ? Number(slug)
    : 0;
const lastPost = currentPage * SITE.postPerPage;
const startPost = lastPost - SITE.postPerPage;

const paginatedPosts = sortedPosts.slice(startPost, lastPost);
---

{
  post ? (
    <PostDetails post={post} postsInSeries={postsInSeries} />
  ) : (
    <Posts
      posts={paginatedPosts}
      pageNum={currentPage}
      totalPages={totalPages.length}
    />
  )
}
